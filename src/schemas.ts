import { z } from "zod";
import { Str, Num } from "chanfana"; // Assuming Str, Num might be needed if schemas evolve

// Placeholder ProblemDetails schema
export const ProblemDetailsSchema = z.object({
  type: z.string().url().optional().describe("A URI reference [RFC3986] that identifies the problem type."),
  title: z.string().describe("A short, human-readable summary of the problem type."),
  status: z.number().int().describe("The HTTP status code ([RFC7231], Section 6) generated by the origin server for this occurrence of the problem."),
  detail: z.string().optional().describe("A human-readable explanation specific to this occurrence of the problem."),
  instance: z.string().url().optional().describe("A URI reference that identifies the specific occurrence of the problem."),
}).describe("Problem Details Schema (RFC 7807)");

// Placeholder Page schema based on example and common fields
export const PageSchema = z.object({
    id: Str({ description: "Page identifier" }),
    versionInfo: z.object({
        label: Str({ description: "Version label"}),
        description: Str({ description: "Version description"}),
        created: z.object({
            at: Str({ description: "Creation timestamp" }),
            by: Str({ description: "Creator identifier" }),
        }),
    }).describe("Version Information"),
    siteId: Str({ description: "Identifier of the site this page belongs to" }),
    parentPageId: Str({ description: "Identifier of the parent page", required: false }),
    path: Str({ description: "URL path of the page" }),
    title: Str({ description: "Page title" }),
    name: Str({ description: "Page name (usually the last path segment)" }),
    description: Str({ description: "Page description", required: false }),
    // thumbnail, metadata, _links mentioned as not implemented in the spec description
}).describe("Page Resource");

// Placeholder Paginated Pages List schema
export const PaginatedPagesListSchema = z.object({
  cursor: Str({ description: "Cursor for fetching the next page of results", required: false }),
  items: z.array(PageSchema).describe("List of Page resources"),
}).describe("Paginated list of Pages"); 